{"version":3,"file":"static/js/187.792d44cd.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","redux/Contacts/selectors.js","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","webpack://react-homework-template/./src/components/ContactItem/ContactItem.module.css?be2b","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/App.module.css?6c4d","webpack://react-homework-template/./src/components/Spinner/Spinner.module.css?d43e","components/Spinner/Spinner.jsx","pages/Contacts.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"formlabel\":\"ContactForm_formlabel__A1oPk\",\"formtitle\":\"ContactForm_formtitle__+pe99\",\"forminput\":\"ContactForm_forminput__Mozbj\",\"btn\":\"ContactForm_btn__wll+u\"};","import { useState } from 'react';\nimport css from './ContactForm.module.css';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from 'redux/Contacts/operations';\n\n\nexport function ContactForm({contacts}) {\n\n  const dispatch = useDispatch();\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n  const handleInputChange = evt => {\n    const { name, value } = evt.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const newContact = {\n      name,\n      number,\n    };\n\n    console.log(contacts);\n    contacts.some(contact => contact.name === newContact.name)\n      ? alert(`${newContact.name} is already contact`)\n      : dispatch(addContact(newContact));\n    reset();\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit}>\n      <label className={css.formlabel}>\n        <span className={css.formtitle}>Name</span>\n        <input\n          className={css.forminput}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleInputChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n      <label className={css.formlabel}>\n        <span className={css.formtitle}>Number</span>\n        <input\n          className={css.forminput}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handleInputChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n      <button className={css.btn} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"formlabel\":\"Filter_formlabel__pSr-a\",\"formtitle\":\"Filter_formtitle__HpwjO\",\"forminput\":\"Filter_forminput__vT0T3\"};","export const getContacts = state => state.contacts.items;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\nexport const getFilter = state => state.filter.value;\n","import css from './Filter.module.css';\nimport { filterContact } from 'redux/Contacts/filterSlice';\nimport { useSelector } from 'react-redux/es/hooks/useSelector';\nimport { useDispatch } from 'react-redux';\nimport { getFilter } from 'redux/Contacts/selectors';\n\nexport function Filter() {\n const dispatch = useDispatch();\n  const handleFilter = evt => dispatch(filterContact(evt.currentTarget.value));\n  const filter = useSelector(getFilter);\n  \n\n  return (\n    <label className={css.formlabel}>\n      <span className={css.formtitle}>Find contacts by name:</span>\n      <input\n        className={css.forminput}\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={handleFilter}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n      />\n    </label>\n  );\n}\n\n\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\"};","// extracted by mini-css-extract-plugin\nexport default {\"listitem\":\"ContactItem_listitem__Id3oZ\",\"listcontact\":\"ContactItem_listcontact__jYlXp\",\"btn\":\"ContactItem_btn__1h5dG\"};","import css from './ContactItem.module.css';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/Contacts/operations';\n\n\n\nexport function ContactItem({id, name, number}) {\n\n  const dispatch = useDispatch();\n  const handleDelete = ()=> dispatch(deleteContact(id))\n\n    return (\n      <li className={css.listitem} key={id}>\n        <p className={css.listcontact}>\n          {name}: {number}\n        </p>\n        <button className={css.btn} onClick={handleDelete} type=\"button\">\n          Delete\n        </button>\n      </li>\n    );\n}","import css from './ContactList.module.css';\nimport PropTypes from 'prop-types';\nimport { ContactItem } from 'components/ContactItem/ContactItem';\n\nexport function ContactList({ findContacts }) {\n\n  return (\n    <ul className={css.list}>\n      {findContacts\n        .sort((firstContact, secondContact) =>\n          firstContact.name.localeCompare(secondContact.name)\n        )\n        .map(findContact => (\n          <ContactItem key={findContact.id} {...findContact} />\n        ))}\n    </ul>\n  );\n}\n\nContactList.propTypes = {\n  findContacts: PropTypes.arrayOf(PropTypes.object),\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"App_container__ZdBeZ\",\"title\":\"App_title__Xrt9W\",\"accent\":\"App_accent__vDiwd\",\"subtitle\":\"App_subtitle__j5Uo2\"};","// extracted by mini-css-extract-plugin\nexport default {\"spinner\":\"Spinner_spinner__Z6H3Z\"};","import css from './Spinner.module.css';\nimport { RotatingLines } from 'react-loader-spinner';\n\nexport function Spinner() {\n  return (\n    <div className={css.spinner}>\n      <RotatingLines width=\"60\" strokeColor=\"yellow\" />\n    </div>\n  );\n}\n","import { ContactForm } from '../components/ContactForm/ContactForm';\nimport { Filter } from '../components/Filter/Filter';\nimport { ContactList } from '../components/ContactList/ContactList';\nimport css from '../components/App.module.css';\nimport { useSelector } from 'react-redux/es/hooks/useSelector';\nimport {\n  getContacts,\n  getError,\n  getFilter,\n  getIsLoading,\n} from 'redux/Contacts/selectors';\nimport { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/Contacts/operations';\n\nimport { Spinner } from '../components/Spinner/Spinner';\n\nexport function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n  const filter = useSelector(getFilter);\n  const contacts = useSelector(getContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const normFilter = filter.toLocaleLowerCase();\n  const findContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(normFilter)\n  );\n\n  return (\n    <div className={css.container}>\n      <h1 className={css.title}>\n        Phone<span className={css.accent}>book</span>\n      </h1>\n      <ContactForm contacts={findContacts} />\n\n      <h2 className={css.subtitle}>Contacts</h2>\n      <Filter />\n      {isLoading && <Spinner />}\n      {contacts && !error && <ContactList findContacts={findContacts} />}\n    </div>\n  );\n}\n"],"names":["ContactForm","contacts","dispatch","useDispatch","useState","name","setName","number","setNumber","handleInputChange","evt","currentTarget","value","className","css","onSubmit","preventDefault","newContact","console","log","some","contact","alert","addContact","type","onChange","pattern","title","required","getContacts","state","items","getIsLoading","isLoading","getError","error","getFilter","filter","Filter","useSelector","filterContact","ContactItem","id","onClick","deleteContact","ContactList","findContacts","sort","firstContact","secondContact","localeCompare","map","findContact","Spinner","width","strokeColor","Contacts","useEffect","fetchContacts","normFilter","toLocaleLowerCase","toLowerCase","includes"],"sourceRoot":""}